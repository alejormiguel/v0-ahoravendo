// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  accounts          Account[]
  sessions          Session[]
  orders            Order[]
  cart              Cart?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id              String   @id @default(cuid())
  name            String
  description     String   @db.Text
  faq             String   @db.Text
  rating          Decimal  @db.Decimal(2, 1) @default(0.0)
  ratingCount     Int      @default(0)
  originalPrice   Decimal  @db.Decimal(11, 2)
  discount        Decimal  @db.Decimal(5, 2)
  finalPrice      Decimal  @db.Decimal(11, 2)
  noTaxesPrice    Decimal  @db.Decimal(11, 2)
  taxes           Decimal  @db.Decimal(11, 2)
  images          String[]
  questions       ProductQuestion[]
  reviews         ProductReview[]
  stock           Int
  category        Category @relation(fields: [categoryId], references: [id])
  categoryId      String
  variations      ProductVariation[]
  specifications  ProductSpecification[]
  seller          Seller @relation(fields: [sellerId], references: [id])
  sellerId        String
  shippingOptions ProductShippingOption[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  cartItems       CartItem[]
  orderItems      OrderItem[]
  featured        Boolean  @default(false)
}

model ProductQuestion {
  id        String  @id @default(cuid())
  question  String  @db.Text
  answer    String? @db.Text
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 

model ProductReview {
  id        String  @id @default(cuid())
  rating    Int     @default(0)
  comment   String  @db.Text
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 

model ProductVariation {
  id              String  @id @default(cuid())
  name            String  @db.Text
  options         ProductVariationOption[]
  product         Product @relation(fields: [productId], references: [id])
  productId       String
  displayPosition Int     @default(0)
} 

model ProductVariationOption {
  id                  String  @id @default(cuid())
  name                String  @db.Text
  productVariation    ProductVariation  @relation(fields: [productVariationId], references: [id])
  productVariationId  String
  displayPosition     Int     @default(0)
} 

model ProductSpecification {
  id              String  @id @default(cuid())
  name            String  @db.Text
  value           String  @db.Text
  product         Product @relation(fields: [productId], references: [id])
  productId       String
  displayPosition Int     @default(0)
}

model ProductShippingOption {
  id                String    @id @default(cuid())
  product           Product @relation(fields: [productId], references: [id])
  productId         String
  name              String    @unique
  cost              Decimal   @db.Decimal(11, 2)
}


model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Seller {
  id              String    @id @default(cuid())
  name            String    @unique
  logo            String?   @db.Text
  verified        Boolean   @default(false)
  salesAmount     Int       @default(0)
  invoiceTypes    String?   @db.Text
  products        Product[]
  shippingOptions SellerShippingOption[]  
}

model SellerShippingOption {
  id            String    @id @default(cuid())
  name          String    @unique
  cost          Decimal   @db.Decimal(11, 2)
  seller        Seller @relation(fields: [sellerId], references: [id])
  sellerId      String
}

model Cart {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @unique
  items         CartItem[]
  shippingTotal Decimal   @db.Decimal(11, 2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  items         OrderItem[]
  status        OrderStatus @default(PENDING)
  total         Decimal     @db.Decimal(10, 2)
  shippingAddress String     @db.Text
  paymentMethod String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
